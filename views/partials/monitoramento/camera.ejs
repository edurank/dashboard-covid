<!DOCTYPE html>
<!--
 *  Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
-->
<html>
<head>
    <style>
        div.select {
            display: inline-block;
            margin: 0 0 1em 0;
        }

        p.small {
            font-size: 0.7em;
        }

        label {
            width: 12em;
            display: inline-block;
        }
    </style>

</head>

<body>
<div id="container">



</div>

<script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>

<script>/*
    *  Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.
    *
    *  Use of this source code is governed by a BSD-style license
    *  that can be found in the LICENSE file in the root of the source
    *  tree.
    */
    
    'use strict';
    
    const videoElement = document.querySelector('video');
    const videoSelect =  document.querySelector('select#videoSource');
    const selectors = [videoSelect];
    
    
    function gotDevices(deviceInfos) {
      // Handles being called several times to update labels. Preserve values.
      const values = selectors.map(select => select.value);
      selectors.forEach(select => {
        while (select.firstChild) {
          select.removeChild(select.firstChild);
        }
      });

      console.log(deviceInfos);

      /* deviceInfos 
        - array com todos os devices da mÃ¡quina
      */
      // itera por todos os elementos do array
      for (let i = 0; i !== deviceInfos.length; ++i) {
        const deviceInfo = deviceInfos[i];
        const option = document.createElement('option');
        option.value = deviceInfo.deviceId;

        if (deviceInfo.kind === 'videoinput') {
          option.text = deviceInfo.label || `camera ${videoSelect.length + 1}`;
          videoSelect.appendChild(option);
        }
      }
      
      selectors.forEach((select, selectorIndex) => {
        if (Array.prototype.slice.call(select.childNodes).some(n => n.value === values[selectorIndex])) {
          select.value = values[selectorIndex];
        }
      });
    }
    
    navigator.mediaDevices.enumerateDevices().then(gotDevices).catch(handleError);
    
    function gotStream(stream) {
      window.stream = stream; // make stream available to console
      videoElement.srcObject = stream;
      // Refresh button list in case labels have become available
      return navigator.mediaDevices.enumerateDevices();
    }
    
    function handleError(error) {
      console.log('navigator.MediaDevices.getUserMedia error: ', error.message, error.name);
    }
    
    function start() {
      if (window.stream) {
        window.stream.getTracks().forEach(track => {
          track.stop();
        });
      }
      const videoSource = videoSelect.value;
      const constraints = {
        video: {deviceId: videoSource ? {exact: videoSource} : undefined}
      };
      navigator.mediaDevices.getUserMedia(constraints).then(gotStream).then(gotDevices).catch(handleError);
    }
    
    videoSelect.onchange = start;
    
    start();</script>
</body>
</html>