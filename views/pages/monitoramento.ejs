<!-- 

    - Tela para o monitoramento com a cÃ¢mera

-->

<!DOCTYPE html>
<html>
    

<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <title>Api Vision</title>

    <!-- Custom fonts for this template-->
    <link href="./vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
    <link
        href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i"
        rel="stylesheet"
    >
    
    <link rel="shortcut icon" href="./vendor/fontawesome-free/svgs/solid/eye.svg">
    <link rel="shortcut icon" href="./vendor/fontawesome-free/svgs/solid/address-book.svg">
 
    <!-- Custom styles for this template-->
    <link href="./css/sb-admin-2.css" rel="stylesheet">

</head>
<body>
    <div id="wrapper">
       <!-- Sidebar -->
         <%- include('../partials/sidebar'); %>

        <div id="content-wrapper">

             <!-- Main Content -->
             <div id="content">

                <!-- Begin Page Content -->
                <div class="container-fluid">

                    <!-- Content Row -->
                    <div class="row">

                        <div class="col-xl-8 col-lg-7">

                            <!-- Area Chart -->
                            <div class="card shadow mb-4">
                                
                                <h4 class="m-0 font-weight-bold text-light">Monitoramento em tempo real</h4>

                                <div id="label-container"></div>
                                <div id="webcam-container"></div>
                                
                                <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
                                <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
                                <script type="text/javascript">
            
                                    const URL = "https://teachablemachine.withgoogle.com/models/AXLDBSdTI/";

                                    let model, webcam, labelContainer, maxPredictions;


                                    async function init() {
                                        const modelURL = URL + "model.json";
                                        const metadataURL = URL + "metadata.json";

                           
                                        model = await tmImage.load(modelURL, metadataURL);
                                        maxPredictions = model.getTotalClasses();

                                        const flip = true; // whether to flip the webcam
                                        webcam = new tmImage.Webcam(400, 400, flip); // width, height, flip
                                        await webcam.setup(); // request access to the webcam
                                        await webcam.play();
                                        window.requestAnimationFrame(loop);

                                        labelContainer = document.getElementById("label-container");
                                        for (let i = 0; i < maxPredictions; i++) { // and class labels
                                            labelContainer.appendChild(document.createElement("div"));
                                            
                                        }
                                        document.getElementById("webcam-container").appendChild(webcam.canvas);
                                     
                                    }

                                    async function loop() {
                                        webcam.update(); // update the webcam frame
                                        await predict();
                                        window.requestAnimationFrame(loop);
                                    }

                                    // run the webcam image through the image model
                                    async function predict() {
                                        // predict can take in an image, video or canvas html element
                                        const prediction = await model.predict(webcam.canvas);
                                        for (let i = 0; i < maxPredictions; i++) {
                                            const classPrediction =
                                                    prediction[i].className + ": " + prediction[i].probability.toFixed(2);
                                            labelContainer.childNodes[i].innerHTML = classPrediction;
                                        }
                                    }
                                </script>

                                <script> init();</script>


                            </div>
                    </div>

                </div>
                <!-- /.container-fluid -->

            </div>
            <!-- End of Main Content -->
        </div>
    </div>



</body>
</html>